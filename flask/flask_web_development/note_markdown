#Part I Introduction o flask
###1.installation 

***


###2. Basic application structure
*   the application instance is an object of class **Flask**

        from flask import Flask 
        app = Flask(__name__)
    
*   a route is declared using this decorate. 400 here is the status code 

        from flask import request
        @app.route('/')
        def index():
            return '<h1>Hello World!</h1>', 400
    
*   check the version of the virtualenv 

        $ virtualenv --version 
        
*   any URLs that match the static portions will be mapped to this route (name is the dynamic argument)

        @app.route('/user/<name>')
        def user(name):
            return '<h1>Hello,%s</h1>'  % name
            
*   The application instance has a run method that launches Flask's integrated development we servers (the code is python idiom)

        if __name__ == '__main__':
            app.run(debug=True)
        
*   check out the version of the application form cloned te application's Git repository on GitHub
        
        $ git checkout2a
        
*   request cannot be a global variable if you consider that in a multi-threaded server the threads are working on different requests from different clients at the same time  
        
        user_agent = request.headers.get('User-Agent')
        return '<p>Your browser is %s</p>' % user-agent 
    
*   what is the hello, app and current_app
    
    >>> from hello import app
    >>> from flask import current_app 
    >>> current_app.name 
    Traceback(most recent call last):
    ...
    RuntimeError: working outside of application context
    >>> app_ctx = app.app_context()
    >>> app_ctx.push()
    'hello'
    >>> app_ctx.pop()
    
*   set a cookie in it 
    
        from flask import make_response 
        @app.route('/')
        def index():
            response = make_response('<h1>This document carries a cookie!</h1>')
            response.set_cookie('answer','42')
            return response 
        
*   error and return, abort function used for error handling
    
        from flask import redirect 
        @app.route('/')
        def index():
            return redirect('http://www.example.com')
            
        from flask import abort 
        @app.route('/user/<id>')
        def get_user(id):
            user = load_user(id)
            if not user:
                abort(404)
            return '<h1>Hello,%s</h1>'  % name
            
*   the extention install with pip 
    
        (venv) $ pip install flask-script
    
        from flask.ext.script import Manager 
        manager = Manager(app)
        
        #...
        
        if __name__ == '__main__':
            manager.run()


+   Flask supports these types of URLs using a special syntax in the route decorators: int, float, and path for routes 

+   If the URL from typing that the application will not know how to handle it and will return an error code 404 to the browser - a web page that does not exist 

+   When Flask receives a request from a client, it needs to make a few objects available to the view function that will handle it. 

+   request object: encapsulates the HTTP request sent by the client 

+   @app.route('/') avoid cluttering view functions with lots of arguments that may or may not needed, Flasks uses contexts to temporarily make certain objects globally accessible

+   Flask builds this mao using the app.route decorators or the equivalent non-decorator version app_url_rule()

+   the HEAD, OPTIONS, GET elements shown in the URL mao are the request methods 

+   request hooks are implemented as decorators 

+   before_first_request, before_request, after_request, teardown_request

+   a common pattern to share data between request hook functions and view functions is to use the g context global 

+ flask extension -> other optional arguments 
    --h, --help show this help message adn exit 
    -t HOST,  --host HOST
    -P port,  --port PORT
    --threaded
    --processes PROCESSES
    --passthrough-errors
    -d, --no-debug
    -r, --no-reload
    The --host argument is a useful option because it tells the web server what network interface to listen to for connections from clients 
    

||||
|---|:---:|---|
|Variable name|Context|Description|
|current_app|Application context| The application instance for the active application|
|g|Application context|An object that the application can use for temporary storage during the headling of a request. This variable is reset with each request.|
|request|Request context|The request object, which encapsulates the content of a HTTP request sent by the client|
|session|Request context| The user session, a dictionary that the application can use to store values that are "remembered" between requests|


    
    
    
###**Definition**
Decorator: a standard feature of the python language, which can modify the behavior of a function different ways  

Response: the return value of this function. If the client is a web browser, the response is the document that is 
displayed to the user. 

View functions: e.x. functions like index() 

Thread: the smallest sequence of instructions that can be managed independently

status code: part of HTTP response, which Flask by default sets to 200, the code that indicates that the request was carried out sucessfully 
(HTTP pro-control requires more than a string as a response to a request)



####Question: 
1. client: The client part keeps the same API as Flask-OAuth. The only changes are the imports:
        from flask_oauthlib.client import OAuth
2. what is the hello, app, flask and current_app 
        >>> from hello import app
        >>> from flask import current_app 
        >>> current_app.name 
        Traceback(most recent call last):
        ...
        RuntimeError: working outside of application context
3. page 38 with these changes, the application acquires a basic set of command-line options. Running hello.py now shows a usage message:
        
    $ python hello.py 
    useage: hello.py [-h] {shell,runserver} ...
    
    positional arguments:
        {shell,runserver}
            shell       Runs a python shell inside Flaks application context 
            runserver   Runs the Flask development server i.e. app.run()

****


###3. Templates
+   The Jinja2 template Engine 

        <h1>Hello,{{name}}!</h1>    #emplates/user.html: Jinja2 template 
+   Templates subfolders located inside the application folder 
+   The function render_template provided by Flask integrates the Jinja2 template engine with the application   
    (The name on the left side used fin the placeholder written in the template. The name on the right side is a variable in the current scope that provide value for the argument of the same name )

        from flask impoer Flask, render_template 
        #...
        @app.route('/index')
        def index():
            return render_template('index.html')
        
        @app.route('/user/<name>')
        def user(name):
            return render_template('user.html',name=name)
            
Variables 
+   The {{name}} construct used in the template refernces a variables, a special placeholder that tells the template 
engine that the value that goes in that place should be obtained from data provided from data provided at the time the template is rendered
+   Variables can be modifies with filters
        Hello, {{name|capitalized}}

|||
|---|:---:|
|safe|renders the value without applying escaping|
|capitalize/lower/upper/|convert the value into lower/upper case or convert the first one is the upper and the rest are lower case|
|title|capitalized each word in value|
|trim|strip|
|striptags|removes any html tags from the value before rendering |


+   control statement 

        {%  if user%}
            Hello, {{user}}!
        {% else %}
            Hello, stranger!
         {% endif %}
         
+   render a ist of element **
   
         <ul>
             {% for comment in comments %}
                <li>{{commeny}}</li>
             {% endfor %}
        </ul>
        
+   support macro, same as function in python 
    
         {% macro render_comment(comment)%}
            <li>{{comment}</li>
         {% endmacro %}
         
         <ul>
             {% for comment in comments %}
                <li>{{commeny}}</li>
             {% endfor %}
        </ul>
        
+   stored in a standard aloned file them imported from all the emplates taht need them 
        
        {% import 'macro.html' as macros %}
        **

+   proportions of template code that need to be repeated in several places can be stored in a separate file and included from all the templates for all the templates to avoid repetition
        
        {% include 'common.html' %}

+   reuse is through template ingeritance --> class inheritance in python code 

        <html>
        <head>
            {% black head %}
            <title>{% black title %}{% endblock %} - My Application</title>
            {% endblock %}
        </head>
        <body>
            {% block body %}
            {% endblock %}
        </body>
        </html>
        
        {% extends "base.html" %}
        {% block title %}Index{% endblock %}
        {% block head %}
            {{super()}}
            <style>
            </style>
        {% endblock %>
        {% blockbody %}
        <h1>Hello,World!</h1>
        {% endblock %}
        
Twitter Bootstrap Integration with Flask-Bootstrap
+   Boostrao is a client-side framework, so server is not directly involved with it 
+   install flask-Bootstrap
        
        (venv) $ pip install flask-bootstrap
        
        from flask.ext.bootstrap import Bootstrap
        # ...
        bootstrap = Bootstrap(app)
+   Flask-Bootstrap is imported from the flask.ext name-space and initialized by passing the application instance in the constructor 
+   templates/user.html: Template that uses Flask-Bootstrap
        
        {% extends "bootstrap/base.html" %}
        {% block title %}Flasky{% endblock %}
        {% block navbar %}
        <div class = "navbar nabar-inverse" role = "navigation">
            <div class = "navbar-header">
                <button type = "button" class = "navar-toggle"
                data-toggle= "collapse" data-target = ".navbar-collapse">
                    <span class = "sr-only">Toggle navigation</span>
                    <span class = "icon-bar"></span>
                    <span class = "icon-bar"></span>
                    <span class = "icon-bar"></span>
                    </botton>
                    <a class = "nav-brand" href = "/">Flasky</a>
                </div>
                <div class = "navar-collapse collapse">
                    <ul class = "nav navbar-nav">
                        <li><a href = "/">HOme</a></li>
                    </ul>
                </div>
            </div>
        </div>
        {% endblock %}
        {% block content %}
        <div class = "container">
            <div class = "page-header">
                <h1>Hello,{{name}}!</h1>
            </div>
            {% endblock %}
+   The block and endblock directives define blocks of content that are added to the base template, title, navbar, and content  

|||
|---|:---:|
|Block name|Description|
|doc|Teh entire HTML document|
|html_attribs/ body attribs|attribute inside the <html>tag|
|html/head/title/body|content of the tag|
|metas|the list of <meta> tags|
|styles|Cascading stylesheet definitions|
|navbar|user-defined navigation bar|
|content|user-defined page content|

|scripts|Javascript declarations at the bottom of the document|
+   the scripts block would need to be written in the derived template to add a new Javascript file to the document
        {% block scripts %}
        {{ super() }}
        <scrupt type="text/javascript" src="my-scripts.js"></script>
        {% endblock %}
+   custom Error Pages
    -   404 triggered when teh client requests a page or route that is now known
    -   500 triggered when there is an unhandled exception
        
        @app.errorhandler(404)
        def page_out_found(e):
            return render_template('404_html'),404
        # same as 500
          
+   custom code 404 error 
    
        {% extends "base.html" %}
        {% block title %}-Page Not Found{% endblock %}
        {% block page_content %}
        <div class = "page-header">
            <h1>Not found</h1>
        </div>
        {% endblock %>
+   link: flask provides the url_for() helper function, which generates URLs from the information stored in the application's URL map 
+   view function name (or endpoint name for routes defined with app.add_url_route() as its single argument and returns its URL)
+   

###**Definition**
 Business logic (presentation logic): view function needs to talk to the database to get the new user added and then generate a response to send back to the browser

####Question: 
1.  |striptags|removes any html tags from the value before rendering |
2.  In variables, what happen if we need more than two, such as trim and capitalized ???
3.  {% include 'common.html' %} what does this code return T or F ? 
4.  reuse is through template ingeritance --> class inheritance in python code  --> how does it runs, how diff 
5.  The block and endblock directives define blocks of content that are added to the base template, what else other than template
6.  |html_attribs|attribute inside the <html>tag| & |metas|the list of <meta> tags| what does it used for 
7.  call url_for('index') return /. what does return / means
8.  url_for('index', _external= True) http://localhost:5000/  does the url has to be founds in the document so that it doesn't show the error or not ?? 
9.  






