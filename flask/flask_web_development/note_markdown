#Part I Introduction o flask
###1.installation 

***


###2. Basic application structure
*   the application instance is an object of class **Flask**

        from flask import Flask 
        app = Flask(__name__)
    
*   a route is declared using this decorate. 400 here is the status code 

        from flask import request
        @app.route('/')
        def index():
            return '<h1>Hello World!</h1>', 400
    
*   check the version of the virtualenv 

        $ virtualenv --version 
        
*   any URLs that match the static portions will be mapped to this route (name is the dynamic argument)

        @app.route('/user/<name>')
        def user(name):
            return '<h1>Hello,%s</h1>'  % name
            
*   The application instance has a run method that launches Flask's integrated development we servers (the code is python idiom)

        if __name__ == '__main__':
            app.run(debug=True)
        
*   check out the version of the application form cloned te application's Git repository on GitHub
        
        $ git checkout2a
        
*   request cannot be a global variable if you consider that in a multi-threaded server the threads are working on different requests from different clients at the same time  
        
        user_agent = request.headers.get('User-Agent')
        return '<p>Your browser is %s</p>' % user-agent 
    
*   what is the hello, app and current_app
    
    >>> from hello import app
    >>> from flask import current_app 
    >>> current_app.name 
    Traceback(most recent call last):
    ...
    RuntimeError: working outside of application context
    >>> app_ctx = app.app_context()
    >>> app_ctx.push()
    'hello'
    >>> app_ctx.pop()
    
*   set a cookie in it 
    
        from flask import make_response 
        @app.route('/')
        def index():
            response = make_response('<h1>This document carries a cookie!</h1>')
            response.set_cookie('answer','42')
            return response 
        
*   error and return, abort function used for error handling
    
        from flask import redirect 
        @app.route('/')
        def index():
            return redirect('http://www.example.com')
            
        from flask import abort 
        @app.route('/user/<id>')
        def get_user(id):
            user = load_user(id)
            if not user:
                abort(404)
            return '<h1>Hello,%s</h1>'  % name
            
*   the extention install with pip 
    
        (venv) $ pip install flask-script
    
        from flask.ext.script import Manager 
        manager = Manager(app)
        
        #...
        
        if __name__ == '__main__':
            manager.run()


+   Flask supports these types of URLs using a special syntax in the route decorators: int, float, and path for routes 

+   If the URL from typing that the application will not know how to handle it and will return an error code 404 to the browser - a web page that does not exist 

+   When Flask receives a request from a client, it needs to make a few objects available to the view function that will handle it. 

+   request object: encapsulates the HTTP request sent by the client 

+   @app.route('/') avoid cluttering view functions with lots of arguments that may or may not needed, Flasks uses contexts to temporarily make certain objects globally accessible

+   Flask builds this mao using the app.route decorators or the equivalent non-decorator version app_url_rule()

+   the HEAD, OPTIONS, GET elements shown in the URL mao are the request methods 

+   request hooks are implemented as decorators 

+   before_first_request, before_request, after_request, teardown_request

+   a common pattern to share data between request hook functions and view functions is to use the g context global 

+ flask extension -> other optional arguments 
    --h, --help show this help message adn exit 
    -t HOST,  --host HOST
    -P port,  --port PORT
    --threaded
    --processes PROCESSES
    --passthrough-errors
    -d, --no-debug
    -r, --no-reload
    The --host argument is a useful option because it tells the web server what network interface to listen to for connections from clients 
    

||||
|---|:---:|---|
|Variable name|Context|Description|
|current_app|Application context| The application instance for the active application|
|g|Application context|An object that the application can use for temporary storage during the headling of a request. This variable is reset with each request.|
|request|Request context|The request object, which encapsulates the content of a HTTP request sent by the client|
|session|Request context| The user session, a dictionary that the application can use to store values that are "remembered" between requests|


    
    
    
###**Definition**
Decorator: a standard feature of the python language, which can modify the behavior of a function different ways  

Response: the return value of this function. If the client is a web browser, the response is the document that is 
displayed to the user. 

View functions: e.x. functions like index() 

Thread: the smallest sequence of instructions that can be managed independently

status code: part of HTTP response, which Flask by default sets to 200, the code that indicates that the request was carried out sucessfully 
(HTTP pro-control requires more than a string as a response to a request)



####Question: 
1. client: The client part keeps the same API as Flask-OAuth. The only changes are the imports:
        from flask_oauthlib.client import OAuth
2. what is the hello, app, flask and current_app 
        >>> from hello import app
        >>> from flask import current_app 
        >>> current_app.name 
        Traceback(most recent call last):
        ...
        RuntimeError: working outside of application context
3. page 38 with these changes, the application acquires a basic set of command-line options. Running hello.py now shows a usage message:
        
    $ python hello.py 
    useage: hello.py [-h] {shell,runserver} ...
    
    positional arguments:
        {shell,runserver}
            shell       Runs a python shell inside Flaks application context 
            runserver   Runs the Flask development server i.e. app.run()

****


###3. Templates
+   The Jinja2 template Engine 

        <h1>Hello,{{name}}!</h1>    #emplates/user.html: Jinja2 template 
+   Templates subfolders located inside the application folder 
+   The function render_template provided by Flask integrates the Jinja2 template engine with the application   
    (The name on the left side used fin the placeholder written in the template. The name on the right side is a variable in the current scope that provide value for the argument of the same name )

        from flask impoer Flask, render_template 
        #...
        @app.route('/index')
        def index():
            return render_template('index.html')
        
        @app.route('/user/<name>')
        def user(name):
            return render_template('user.html',name=name)
            
Variables 
+   The {{name}} construct used in the template refernces a variables, a special placeholder that tells the template 
engine that the value that goes in that place should be obtained from data provided from data provided at the time the template is rendered
+   Variables can be modifies with filters
        Hello, {{name|capitalized}}

|||
|---|:---:|
|safe|renders the value without applying escaping|
|capitalize/lower/upper/|convert the value into lower/upper case or convert the first one is the upper and the rest are lower case|
|title|capitalized each word in value|
|trim|strip|
|striptags|removes any html tags from the value before rendering |


+   control statement 

        {%  if user%}
            Hello, {{user}}!
        {% else %}
            Hello, stranger!
         {% endif %}
         
+   render a ist of element **
   
         <ul>
             {% for comment in comments %}
                <li>{{commeny}}</li>
             {% endfor %}
        </ul>
        
+   support macro, same as function in python 
    
         {% macro render_comment(comment)%}
            <li>{{comment}</li>
         {% endmacro %}
         
         <ul>
             {% for comment in comments %}
                <li>{{commeny}}</li>
             {% endfor %}
        </ul>
        
+   stored in a standard aloned file them imported from all the emplates taht need them 
        
        {% import 'macro.html' as macros %}
        **

+   proportions of template code that need to be repeated in several places can be stored in a separate file and included from all the templates for all the templates to avoid repetition
        
        {% include 'common.html' %}

+   reuse is through template ingeritance --> class inheritance in python code 

        <html>
        <head>
            {% black head %}
            <title>{% black title %}{% endblock %} - My Application</title>
            {% endblock %}
        </head>
        <body>
            {% block body %}
            {% endblock %}
        </body>
        </html>
        
        {% extends "base.html" %}
        {% block title %}Index{% endblock %}
        {% block head %}
            {{super()}}
            <style>
            </style>
        {% endblock %>
        {% blockbody %}
        <h1>Hello,World!</h1>
        {% endblock %}
        
Twitter Bootstrap Integration with Flask-Bootstrap
+   Boostrao is a client-side framework, so server is not directly involved with it 
+   install flask-Bootstrap
        
        (venv) $ pip install flask-bootstrap
        
        from flask.ext.bootstrap import Bootstrap
        # ...
        bootstrap = Bootstrap(app)
        
        $git checkout 3a
        
+   Flask-Bootstrap is imported from the flask.ext name-space and initialized by passing the application instance in the constructor 
+   templates/user.html: Template that uses Flask-Bootstrap
        
        {% extends "bootstrap/base.html" %}
        {% block title %}Flasky{% endblock %}
        {% block navbar %}
        <div class = "navbar nabar-inverse" role = "navigation">
            <div class = "navbar-header">
                <button type = "button" class = "navar-toggle"
                data-toggle= "collapse" data-target = ".navbar-collapse">
                    <span class = "sr-only">Toggle navigation</span>
                    <span class = "icon-bar"></span>
                    <span class = "icon-bar"></span>
                    <span class = "icon-bar"></span>
                    </botton>
                    <a class = "nav-brand" href = "/">Flasky</a>
                </div>
                <div class = "navar-collapse collapse">
                    <ul class = "nav navbar-nav">
                        <li><a href = "/">HOme</a></li>
                    </ul>
                </div>
            </div>
        </div>
        {% endblock %}
        {% block content %}
        <div class = "container">
            <div class = "page-header">
                <h1>Hello,{{name}}!</h1>
            </div>
            {% endblock %}
            
        $git checkout 3b
        
+   The block and endblock directives define blocks of content that are added to the base template, title, navbar, and content  

|||
|---|:---:|
|Block name|Description|
|doc|Teh entire HTML document|
|html_attribs/ body attribs|attribute inside the <html>tag|
|html/head/title/body|content of the tag|
|metas|the list of <meta> tags|
|styles|Cascading stylesheet definitions|
|navbar|user-defined navigation bar|
|content|user-defined page content|

|scripts|Javascript declarations at the bottom of the document|
+   the scripts block would need to be written in the derived template to add a new Javascript file to the document
        {% block scripts %}
        {{ super() }}
        <scrupt type="text/javascript" src="my-scripts.js"></script>
        {% endblock %}
+   custom Error Pages
    -   404 triggered when teh client requests a page or route that is now known
    -   500 triggered when there is an unhandled exception
        
        @app.errorhandler(404)
        def page_out_found(e):
            return render_template('404_html'),404
        # same as 500
          
+   custom code 404 error 
    
        {% extends "base.html" %}
        {% block title %}-Page Not Found{% endblock %}
        {% block page_content %}
        <div class = "page-header">
            <h1>Not found</h1>
        </div>
        {% endblock %>
        
        $git checkout 3c
        
+   link: flask provides the url_for() helper function, which generates URLs from the information stored in the application's URL map 
+   view function name (or endpoint name for routes defined with app.add_url_route() as its single argument and returns its URL)
+   Dynamic URLs can be generated with url_for() by passing the dynamic parts as key-word arguments -- url_for('user',name='john',_external= True)  would return http://localhost:5000/user/john
+   static files: use static files such as images, JavaScript source files, and CSS that are referenced from the HTML code
        
        url_for('static', filename='css/styles.css',_external=True) 
        return /
        >>> http://localhost:5000/static/css/styles.css
        
+   templates/base.html: favicon definition
        
        {% block head %}
        {{super()}}
        <link rel='shortcut icon' href="{{url_for('static',filename='favicon.ico')}}"
        type="image/x-icon">
        {% endblock %}
        
        $git checkout 3d
        
+   localization of Dates and Times with Flask-Moment: The server needs uniform time units that are independent of the location of each other, so typically Coordinated Universal Times(UTC) is used
+   Flask-moment is an extension for Flask applications that integrates moment.js
        
        (venv) $ pip install flask-moment
        
        from flask.ext.moment import Moment
        moment = Moment(app)
        
        {% block scripts %}
        {{super() }}
        {{momment.include_moment() }}
        {% endblock %}
        
+   zdd a detetime variable in hello.py

        @app.route('/')
        def index():
            return render_template('index.html',current_time=datetime.utcnow())
            
+   current_time is rendered in the template 
    
        <p>The local and time is {{moment(current_time).format('LLL')}}.</p>
        <p>That was {{moment(current_time).formnow(refresh=True)}}</p>
        
+   The format('LLL') format renders the date and time according to the time zone and local settings in the client computer
+   The fromnow() render style shown in the second line renders a relative timestamp and automatically refreshes is as time passes 

        $git checkout 3e 
+   Flask-Moment implements the format(), fromNow(),fromTime().calendar(),valueOf(),unix() methods from moment.js 
+   [moment.js](http://momentjs.com/)
+   The timestamps rendered by Flask-Moment can e localized to many languages by passing the language code to function lang():
        
        {{moment.lang('es')}}


###**Definition**
 Business logic (presentation logic): view function needs to talk to the database to get the new user added and then generate a response to send back to the browser

####Question: 
1.  |striptags|removes any html tags from the value before rendering |
2.  In variables, what happen if we need more than two, such as trim and capitalized ???
3.  {% include 'common.html' %} what does this code return T or F ??
4.  reuse is through template ingeritance --> class inheritance in python code  --> how does it runs, how diff ??
5.  The block and endblock directives define blocks of content that are added to the base template, what else other than template ??
6.  |html_attribs|attribute inside the <html>tag| & |metas|the list of <meta> tags| what does it used for ??
7.  call url_for('index') return /. what does return / means  ??
8.  url_for('index', _external= True) http://localhost:5000/  does the url has to be founds in the document so that it doesn't show the error or not ?? 
9.  Dynamic URLs need to be exited or not ??
10. The format('LLL') format renders the date and time according to the time zone and local settings in the client computer电脑设置时间不是网上的时间的意思么

---

### Chapter4 Web Forms

        (venv) $ pip install flask-wtf
+   Cross-Site Request Forgery (CSRF) protection -- Flask-WTF protects all forms against Cross-Site Request Forgery (CSRF) attacks. 
+   A CSRF attack occurs when a malicious website sends requests to a different website on which the victim is logged in 
        
        app=Flask(__name__)
        app.config['SECRET_KEY'] = 'hard to get string'
+   Form Classes: When using Flask-WTF, each web form is represented by a class that inherits from class Form 
    
        from flask.ext.wtf import form 
        from wtforms import StringField, SubmitField 
        from wtforms.validators import Required 
        
        class NameForm(Form):
            name = StringField('What is your name?',validators=[Required()])
            submit = SubmitField('Submit')
+   The submitField class represents an <input> element 
+   The Required() validator ensures that the field is not submitted empty 
+   To improve the look of the form, any arguments sent into the calls that render the fields are converted into HTML attributes for the field
        
        <form method = "POST">
            {{form.name.label}}{{form.name(id='my-text-field')}}
            {{form.submit()}}
        </form>

|||
|---|:---:|
|Field| type Description|
|StringField |Text field|
| TextAreaField |Multiple-line text field|
|PasswordField| Password text field|
|HiddenField| Hidden text field|||DateField |Text field that accepts a datetime.date value in a given format|
|DateTimeField| Text field that accepts a datetime.datetime value in a given format|
|IntegerField |Text field that accepts an integer value|
|DecimalField| Text field that accepts a decimal.Decimal value|
|FloatField Text| field that accepts a floating-point value|
|BooleanField |Checkbox with True and False values|
|RadioField| List of radio buttons|
|SelectField| Drop-down list of choices|
|SelectMultipleField| Drop-down list of choices with multiple selection|
|FileField| File upload field|
|SubmitField| Form submission button|
|FormField |Embed a form as a field in a container form|
|FieldList| List of fields of a given type|

|||
|---|:---:|
|Validator| Description|
|Email| Validates an email address|
|EqualTo |Compares the values of two fields; useful when requesting a password to be entered twice for confirmation|
|IPAddress| Validates an IPv4 network address|
|Length |Validates the length of the string entered|
|NumberRange| Validates that the value entered is within a numeric range|
|Optional| Allows empty input on the field, skipping additional validators|
|Required| Validates that the field contains data|
|Regexp| Validates the input against a regular expression|
|URL| Validates a URL|
|AnyOf |Validates that the input is one of a list of possible values|
|NoneOf| Validates that the input is none of a list of possible values|


+   Flask-Bootstrap provides a very high-level helper function that renders an entire Flask-WTF form using Bootstrap's predefined form styles 
        
        {% import "bootstrap/wtf.html" as wtf %}
        {{wtf.quick_form(form)}}
        
+   templates/index.html: Using Flask-WTF and Flask-Bootstrap to render a form 
    
        {% extends "base.html" %}
        {% import "bootstrap/wtf.html" as wtf %}
        
        {% black title %}Flasky{% endblock %}
        
        {% block page_content %}
        <div class="page-header">
            <h1>Hello,{% if name %}{{name}}{% else %}Stranger{% endif %}</h1>
        </div>
        {{wtf.quick_form(form)}}
        {% endblock %}
+   Form Handling in View Functions 
        
        @app.route('/',methods=['GET','POST'])
        def index();
        name = None
        form = NameForm()
        if form.validate_on)submit():
            name = form.name.data
            form.name.data = ''
        return render_template('index.html',form=form,name=name)
+   The methods argument added to the app.route decorator tells Flask to register the view function as handler for GET and POST requests in the URL mao 
+   When methods is not given, the view function is registered to handle GET requests only 
+   POST: form submissions, GET: no body compare to post
+   The validate_on_submit()method of the form returns True when the form was submitted and the data has been accepted by all the field validators 
+   When a user navigates to the application for the first time, the server will reveive a GET request with no form data 
+   The call to validate_on_submit() invokes the Required() validators attched to the name field. If the name is not empty, then the validator accepts it and validate_on_submit() returns 
   
        git check out version 4a
+   Redirects and User sessions: never leave a POST request as a last request sent by the browser Post/Redirect/Get pattern
+   Applications can 'remember' things from one request to the next by storing them in the user session, private storage that is available to each connected client 
+   user sessions are stored in client-side cookies that are cryptographically signed using the configured SECRET_KEY

        from flask import Flask,render_template,session,redirect,url_for
        def index():
            from = NameForm()
            if form.validate_on_submit():
                session['name']=form.name.data
                return redirect(url_for('index'))
            return render_template('index.html',form=form,name=session.get('name'))
+   a local name variable was used to store the name entered by the user in the form 
+   redirect(), a helper function that generates the HTTP redirect response 
+   the first and only required argument to url_for() is thr endpoint name 
+   get() retutns a default value of NOne for a missing key 
        
        check out 4b for this version 
        
+   Message Flashing: an update after a request is comlpeted 
        
        from flask import Flask,render_template, session,redirect, url_for,flash
        
        @app.route('/',method=['GET','POST'])
        def index():
            form=NameForm()
            if form.validate_on_submit():
                olf_name=session.get('name')
                if old_name is not None and old_name != form.name.data:
                    flash('Look like you have changed your name!')
                session['name']=form.name.data
                form.name.data=''
                return redirect(url_for('index'))
            return render_template('index.html')
                form = form,name = session.get('name')
+   flash() function is invoked with a message to be displayed on the next response sent back to the client 
+   render flashed message is the base template, because tat will enable these message in al pages 
+   get_flashed_message() function retrieve the message and render them 
        
        {% black content %}
            {% for message in get_flashed_message() %}
            <div class='alert alert-warning'>
                <button type='button' class='close' data-dismiss='alert'>&times;</button>
                {{message}}
            </div>
            {% endof %}
            
            {% block page_content %}{% endblock %}
        </div>
        {% endblock %}
+   each time flash() was called in the previous request cycle 
+   from get_flashed_message() will note be returned the next time this function is called, so flashed message appear only once and are then discarded 

        check out version at 4c 
    
###**Definition**

Flask-WTF extension: a Flask integration wrapper around the framework-agnostic WTFForms package 
Session: standard Python dictionary 


####Question: 


